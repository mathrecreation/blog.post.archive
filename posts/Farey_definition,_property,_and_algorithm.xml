<>
    <id>tag:blogger.com,1999:blog-5008879105295771159.post-5646451567810399758</id>
    <blogger:type>POST</blogger:type>
    <blogger:status>LIVE</blogger:status>
    <author>
      <name>dan.mackinnon</name>
      <blogger:type>BLOGGER</blogger:type>
    </author>
    <title>Farey definition, property, and algorithm</title>
    <content type='html'>&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUsrJLbqwa0ybPlEnyUwxC53yCQf97Juq0iqjYf0RtAOsiop79dz1sihMBZgeUjWiiP4LCcW6bQLtLhB4BpRXNmrWTVn1u6Sb1C8f8vCdcJ5hiazoJNRxXOA4Masj6tSeW6BSV0JM3BeI/s1600-h/ford_processing_30.jpg"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 122px;" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUsrJLbqwa0ybPlEnyUwxC53yCQf97Juq0iqjYf0RtAOsiop79dz1sihMBZgeUjWiiP4LCcW6bQLtLhB4BpRXNmrWTVn1u6Sb1C8f8vCdcJ5hiazoJNRxXOA4Masj6tSeW6BSV0JM3BeI/s400/ford_processing_30.jpg" alt="" id="BLOGGER_PHOTO_ID_5301657342174225970" border="0" /&gt;&lt;/a&gt;&lt;div style="text-align: center;"&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;An &lt;a href="http://mathrecreation.blogspot.com/2009/02/farey-ford-fathom.html"&gt;earlier post&lt;/a&gt; outlined some ideas for exploring &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;Farey&lt;/span&gt; sequences in Fathom, but you were required to already have the data to generate the sequence. Here is  an outline of how you can go about generating this data.  The definition and properties of &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1"&gt;Farey&lt;/span&gt; sequences here are from Hardy &amp;amp; Wright's &lt;a href="http://books.google.com/books?id=FlUj0Rk_rF4C&amp;amp;printsec=frontcover" style="color: rgb(204, 102, 0); text-decoration: underline;"&gt;An Introduction to the Theory of Numbers&lt;/a&gt; (which I am slowly working my way through).&lt;br /&gt;&lt;br /&gt;The &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;Farey&lt;/span&gt; sequence of order &lt;span style="font-style: italic;"&gt;n&lt;/span&gt; is the sequence of irreducible fractions between 0 and 1 whose denominator does not exceed &lt;span style="font-style: italic;"&gt;n&lt;/span&gt;. So, the elements of the sequence are of the form &lt;span style="font-style: italic;"&gt;h/k&lt;/span&gt;, where &lt;span style="font-style: italic;"&gt;h&lt;/span&gt; &lt; &lt;span style="font-style: italic;"&gt;k&lt;/span&gt; &lt; &lt;span style="font-style: italic;"&gt;n&lt;/span&gt;, and &lt;span style="font-style: italic;"&gt;h&lt;/span&gt; and &lt;span style="font-style: italic;"&gt;k&lt;/span&gt; are relatively prime.  &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The main theorem about &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3"&gt;Farey&lt;/span&gt; numbers provides them with their characteristic property (Theorem 29 in &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_4"&gt;TofN&lt;/span&gt;). The characteristic property of &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_5"&gt;Farey&lt;/span&gt; sequences is that if &lt;span style="font-style: italic;"&gt;h/k&lt;/span&gt;, &lt;span style="font-style: italic;"&gt;h''/k''&lt;/span&gt;, and &lt;span style="font-style: italic;"&gt;h'/k'&lt;/span&gt; are successive terms in a &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_6"&gt;Farey&lt;/span&gt; sequence, then &lt;span style="font-style: italic;"&gt;h''/k''&lt;/span&gt; is the &lt;span style="font-style: italic;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_7"&gt;mediant&lt;/span&gt;&lt;/span&gt; of &lt;span style="font-style: italic;"&gt;h/k&lt;/span&gt; and &lt;span style="font-style: italic;"&gt;h'/k'&lt;/span&gt;.  If &lt;span style="font-style: italic;"&gt;h/k&lt;/span&gt; and &lt;span style="font-style: italic;"&gt;h'/k'&lt;/span&gt; are two reduced fractions, their &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_8"&gt;mediant&lt;/span&gt; is given by (&lt;span style="font-style: italic;"&gt;h&lt;/span&gt;+&lt;span style="font-style: italic;"&gt;h'&lt;/span&gt;)/(&lt;span style="font-style: italic;"&gt;k&lt;/span&gt;+&lt;span style="font-style: italic;"&gt;k'&lt;/span&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's nice when a theorem tells you how to implement an algorithm. This property tells us that &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_9"&gt;Farey&lt;/span&gt; sequences can be built iteratively or recursively, beginning with F1={0/1 ,1/1}. The algorithm to do this is a nice one  - it's probably not often used as a textbook exercise in recursion because it helps if you to have some data structure or class to represent the fraction, and a way of telling if integers are relatively prime (you can use the Euclidean algorithm to implement a &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_10"&gt;gcd&lt;/span&gt;() function). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here is an outline of how to calculate the next &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_11"&gt;Farey&lt;/span&gt; sequence, given that you have one already.&lt;br /&gt;&lt;br /&gt;0) input a &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_12"&gt;Farey&lt;/span&gt; sequence &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_13"&gt;oldSequence&lt;/span&gt;&lt;/span&gt; (initial sequence will be {0/1, 1/1})&lt;br /&gt;&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;1)  create a new empty sequence &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_14"&gt;newSequence&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;2)  iterate over &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_15"&gt;oldSequence&lt;/span&gt; &lt;/span&gt;and find out its level by finding the largest denominator that occurs store this in &lt;span style="font-weight: bold;"&gt;n&lt;/span&gt;&lt;/div&gt;&lt;div&gt;3)  set &lt;span style="font-weight: bold;"&gt;n= n+1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;4)  iterate over &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_16"&gt;oldSequence&lt;/span&gt;&lt;/span&gt;, looking at each pair of adjacent elements (&lt;span style="font-weight: bold;"&gt;left &lt;/span&gt;and &lt;span style="font-weight: bold;"&gt;right&lt;/span&gt;)&lt;br /&gt;&lt;/div&gt;&lt;div&gt;4.1)  add &lt;span style="font-weight: bold;"&gt;left&lt;/span&gt; to &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_17"&gt;newSequence&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;4.2)  if the denominators of &lt;span style="font-weight: bold;"&gt;left &lt;/span&gt;and &lt;span style="font-weight: bold;"&gt;right &lt;/span&gt;sum to &lt;span style="font-weight: bold;"&gt;n&lt;/span&gt;, form their &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_18"&gt;mediant&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;4.2.1)  if the numerator and denominator of the &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_19"&gt;mediant&lt;/span&gt; &lt;/span&gt;are relatively prime, add &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_20"&gt;mediant&lt;/span&gt; &lt;/span&gt;to &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_21"&gt;newSequence&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;5)  add the last element of &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_22"&gt;oldSequence&lt;/span&gt; &lt;/span&gt;to &lt;span style="font-weight: bold;"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_23"&gt;newSequence&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Note that you only need to add in new elements where the denominators of existing adjacent elements sum to the &lt;span style="font-style: italic;"&gt;n&lt;/span&gt; value - when this happens you form the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_24"&gt;mediant&lt;/span&gt; of the two adjacent elements. Furthermore, the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_25"&gt;mediant&lt;/span&gt; is only added if the fraction can't be reduced.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Below is some Java-&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_26"&gt;ish&lt;/span&gt; code corresponding to the above - it assumes that the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_27"&gt;oldSequence&lt;/span&gt; and &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_28"&gt;newSequence&lt;/span&gt; are an &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_29"&gt;ArrayList&lt;/span&gt; and that you have a class Fraction that has fields &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_30"&gt;num&lt;/span&gt; (numerator) and den (denominator).&lt;br /&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjjXpC4TpkqVrWgNdVt9JyoHOhhqaZ16zW1pftdcsJZ2O9ZynHPOEBMQNFsmPQtjRNrPzuPMFQEVXq0E2eyCeR_K2pJIbUexPQIYDcX8plRbhDdFm-jtRkYAwzXEtRMbmdzjlqfBbk-yY8/s1600-h/code_snip.jpg"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 173px;" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjjXpC4TpkqVrWgNdVt9JyoHOhhqaZ16zW1pftdcsJZ2O9ZynHPOEBMQNFsmPQtjRNrPzuPMFQEVXq0E2eyCeR_K2pJIbUexPQIYDcX8plRbhDdFm-jtRkYAwzXEtRMbmdzjlqfBbk-yY8/s400/code_snip.jpg" alt="" id="BLOGGER_PHOTO_ID_5301984950857567730" border="0" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here are the first five &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_31"&gt;Farey&lt;/span&gt; sequences that you get from the algorithm:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgkithzMHxjk9zEPJBYE-M8-ueXpBMDyuoyjdZGQ93NMkwV49OWsKOvZ8m_hZXG_yRrZb69igGM8ipYtETuYQj2nkVtm2ULHmaXkhCg9OBYTeCwshbShiNL_sQQ0yDvD_WfnzpxT1EIMo/s1600-h/farey_5.jpg"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 72px;" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgkithzMHxjk9zEPJBYE-M8-ueXpBMDyuoyjdZGQ93NMkwV49OWsKOvZ8m_hZXG_yRrZb69igGM8ipYtETuYQj2nkVtm2ULHmaXkhCg9OBYTeCwshbShiNL_sQQ0yDvD_WfnzpxT1EIMo/s400/farey_5.jpg" alt="" id="BLOGGER_PHOTO_ID_5301976682649164514" border="0" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The image at the top of the post was generated by implementing the algorithm in &lt;a href="http://www.processing.org/"&gt;Processing&lt;/a&gt;, and using the result to draw the associated Ford circles - you could do something similar in regular Java (or other language). If you draw the Ford Circles associated with the sequence, the circle for a fraction "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_32"&gt;frac&lt;/span&gt;" will be centered at (x,y) and have a radius r where&lt;/div&gt;&lt;div&gt;x = (scale)*frac.num/frac.den&lt;/div&gt;&lt;div&gt;y = r&lt;/div&gt;&lt;div&gt;r = (scale)/(2*(&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_33"&gt;frac&lt;/span&gt;.den)^2)&lt;/div&gt;&lt;div&gt;where "scale" is some scaling factor (probably in the 100's) that increases the size of the image.&lt;/div&gt;&lt;div&gt;Here I decided to draw two copies of each circle, one on top of the other.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;That it contains only fractions between 0 and 1 and that it contains all reduced fractions for denominators &lt;span class="Apple-style-span" style="font-style: italic;"&gt;k &lt;/span&gt;&lt; &lt;span class="Apple-style-span" style="font-style: italic;"&gt;n, &lt;/span&gt;connects &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_34"&gt;Farey&lt;/span&gt; sequences to Euler's &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_35"&gt;totient&lt;/span&gt; function. Euler's &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_36"&gt;totient&lt;/span&gt; function is an arithmetic function that for a given &lt;span style="font-style: italic;"&gt;k&lt;/span&gt;, counts the integers less than &lt;span style="font-style: italic;"&gt;k&lt;/span&gt; that are relatively prime to it. This is exactly the number of times that a fraction of the form &lt;span style="font-style: italic;"&gt;h/k&lt;/span&gt; will appear in the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_37"&gt;Farey&lt;/span&gt; sequence for &lt;span style="font-style: italic;"&gt;k&lt;/span&gt;&gt;1.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyiI2rP_KInDVIp6fkd90yxmdNnCSuKRltJ9i7hWaPgFqqJWM0hBn06iQjALfs1qJtp4lL3BvAEEmCJ9YEQtLCj2utUEtlvmAfM-lxnQ5p1SRBk1Y9uOeeyQvkjiqqQOHdasCUjDLEHK4/s1600-h/farey_totient.jpg"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyiI2rP_KInDVIp6fkd90yxmdNnCSuKRltJ9i7hWaPgFqqJWM0hBn06iQjALfs1qJtp4lL3BvAEEmCJ9YEQtLCj2utUEtlvmAfM-lxnQ5p1SRBk1Y9uOeeyQvkjiqqQOHdasCUjDLEHK4/s400/farey_totient.jpg" alt="" id="BLOGGER_PHOTO_ID_5301656573954419842" style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 245px;" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_38"&gt;Farey&lt;/span&gt; algorithm, how to draw Ford circles, and the connection to Euler's &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_39"&gt;totient&lt;/span&gt; function are described nicely in  J.H. Conway and R.K. Guy's &lt;a href="http://books.google.com/books?id=cLEhHELiwrQC&amp;amp;dq=book+of+numbers+conway&amp;amp;source=gbs_summary_s&amp;amp;cad=0"&gt;The Book of Numbers&lt;/a&gt; - a great companion to a book like &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_40"&gt;TofN&lt;/span&gt;.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;</content>
    <blogger:metaDescription/>
    <blogger:created>2009-02-11T21:34:40.905Z</blogger:created>
    <published>2009-02-11T21:33:00Z</published>
    <updated>2011-09-11T02:01:52.901Z</updated>
    <blogger:location/>
    <category scheme='tag:blogger.com,1999:blog-5008879105295771159' term='numbers'/>
    <category scheme='tag:blogger.com,1999:blog-5008879105295771159' term='farey'/>
    <category scheme='tag:blogger.com,1999:blog-5008879105295771159' term='math'/>
    <category scheme='tag:blogger.com,1999:blog-5008879105295771159' term='TofN'/>
    <category scheme='tag:blogger.com,1999:blog-5008879105295771159' term='Processing'/>
    <blogger:filename>/2009/02/farey-definition-property-and-algorithm.html</blogger:filename>
    <link/>
    <enclosure/>
    <blogger:trashed/>
  